spring:
  application:
    name: frontend-service

  datasource:
    url: jdbc:mysql://localhost:3307/tradenet
    username: tnfeuser
    password: P@ssw0rd1234
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
    show-sql: true

  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

  cache:
    type: redis
    redis:
      time-to-live: 60000
  data:
    redis:
      cluster:
          nodes:
          - redis-node-01:7001
          - redis-node-02:7002
          - redis-node-03:7003

# Discovery Server Access
#  1. DEV ONLY: Reduce the lease renewal interval to speed up registration
#  2. Define URL of registration server (defaultZone)
eureka:
  client:
    enabled: true
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:1101/eureka/
  instance:
    hostname: ${spring.application.name}
    leaseRenewalIntervalInSeconds: 10   # DO NOT DO THIS IN PRODUCTION

    #  3. If using the Angel release-train ONLY, give the process a unique instance id
    #     so that multiple instances can register when running on SAME host.  This is
    #     not needed since release-train Brixton.
    #     NOTE-1: spring.application.instance_id is only set when run on Cloud Foundry,
    #             so we fallback on the server-port when it is not defined
    #     NOTE-2: Syntax ${x:${y}} = use $x if set, otherwise use $y
    #metadataMap:
    #  instanceId: ${spring.application.name}:${spring.application.instance_id:${server.port}}

server:
  servlet:
    context-path: /${spring.application.name}

  # HTTP Server
  port: 1301   # HTTP (Tomcat) port

# User-defined properties
registration:
  server:
    hostname: localhost




